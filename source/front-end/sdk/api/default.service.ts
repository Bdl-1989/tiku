/**
 * 题库外部接口
 * 题库系统供其他应用调用的接口
 *
 * OpenAPI spec version: 1.1.0
 * Contact: czfshine@outlook.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BasicResponse } from '../model/basicResponse';
import { CollectionIdResult } from '../model/collectionIdResult';
import { CollectionInfo } from '../model/collectionInfo';
import { GrantInfo } from '../model/grantInfo';
import { GrantResult } from '../model/grantResult';
import { ProblemIdList } from '../model/problemIdList';
import { ProblemInfo } from '../model/problemInfo';
import { QuerryInfo } from '../model/querryInfo';
import { QuerryResult } from '../model/querryResult';
import { RevokeInfo } from '../model/revokeInfo';
import { StatusInfo } from '../model/statusInfo';
import { StatusInfoList } from '../model/statusInfoList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'http://203.195.239.100:10086/tiku/api/v1/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 增加题目
     * 增加一道题目到题库 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addProblems(body?: ProblemInfo, observe?: 'body', reportProgress?: boolean): Observable<BasicResponse>;
    public addProblems(body?: ProblemInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BasicResponse>>;
    public addProblems(body?: ProblemInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BasicResponse>>;
    public addProblems(body?: ProblemInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BasicResponse>(`${this.basePath}/problems`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 增加题目集合
     * 添加题目集合信息
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionPost(body?: CollectionInfo, observe?: 'body', reportProgress?: boolean): Observable<CollectionIdResult>;
    public collectionPost(body?: CollectionInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionIdResult>>;
    public collectionPost(body?: CollectionInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionIdResult>>;
    public collectionPost(body?: CollectionInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionIdResult>(`${this.basePath}/collection`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取题目状态
     * 获取错题状态
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProblemStatus(body?: ProblemIdList, observe?: 'body', reportProgress?: boolean): Observable<StatusInfoList>;
    public getProblemStatus(body?: ProblemIdList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StatusInfoList>>;
    public getProblemStatus(body?: ProblemIdList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StatusInfoList>>;
    public getProblemStatus(body?: ProblemIdList, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<StatusInfoList>(`${this.basePath}/problemStatus`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 授权
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public grantUserTokenPost(body?: GrantInfo, observe?: 'body', reportProgress?: boolean): Observable<GrantResult>;
    public grantUserTokenPost(body?: GrantInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GrantResult>>;
    public grantUserTokenPost(body?: GrantInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GrantResult>>;
    public grantUserTokenPost(body?: GrantInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GrantResult>(`${this.basePath}/grantUserToken`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 更新题目状态
     * 更新错题状态
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public problemStatus(body?: StatusInfo, observe?: 'body', reportProgress?: boolean): Observable<BasicResponse>;
    public problemStatus(body?: StatusInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BasicResponse>>;
    public problemStatus(body?: StatusInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BasicResponse>>;
    public problemStatus(body?: StatusInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BasicResponse>(`${this.basePath}/problemStatus`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 删除题目
     * 删除题目，swagger的del不能有请求体，只能写在参数里面了
     * @param xTikuPoolId 题库id
     * @param xTikuToken 授权码
     * @param problemId 待删除的问题
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public problemsDelete(xTikuPoolId: string, xTikuToken: string, problemId: string, observe?: 'body', reportProgress?: boolean): Observable<BasicResponse>;
    public problemsDelete(xTikuPoolId: string, xTikuToken: string, problemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BasicResponse>>;
    public problemsDelete(xTikuPoolId: string, xTikuToken: string, problemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BasicResponse>>;
    public problemsDelete(xTikuPoolId: string, xTikuToken: string, problemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xTikuPoolId === null || xTikuPoolId === undefined) {
            throw new Error('Required parameter xTikuPoolId was null or undefined when calling problemsDelete.');
        }

        if (xTikuToken === null || xTikuToken === undefined) {
            throw new Error('Required parameter xTikuToken was null or undefined when calling problemsDelete.');
        }

        if (problemId === null || problemId === undefined) {
            throw new Error('Required parameter problemId was null or undefined when calling problemsDelete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (problemId !== undefined && problemId !== null) {
            queryParameters = queryParameters.set('problemId', <any>problemId);
        }

        let headers = this.defaultHeaders;
        if (xTikuPoolId !== undefined && xTikuPoolId !== null) {
            headers = headers.set('X-tiku-poolId', String(xTikuPoolId));
        }
        if (xTikuToken !== undefined && xTikuToken !== null) {
            headers = headers.set('X-tiku-token', String(xTikuToken));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<BasicResponse>(`${this.basePath}/problems`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 查询题目集合信息
     * 按条件查询集合，与查询题目一模一样，不过是去集合里面找而已 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryCollection(body?: QuerryInfo, observe?: 'body', reportProgress?: boolean): Observable<QuerryResult>;
    public queryCollection(body?: QuerryInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuerryResult>>;
    public queryCollection(body?: QuerryInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuerryResult>>;
    public queryCollection(body?: QuerryInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<QuerryResult>(`${this.basePath}/queryCollection`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 查询题目信息
     * 按条件查询题目 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryProblems(body?: QuerryInfo, observe?: 'body', reportProgress?: boolean): Observable<QuerryResult>;
    public queryProblems(body?: QuerryInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuerryResult>>;
    public queryProblems(body?: QuerryInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuerryResult>>;
    public queryProblems(body?: QuerryInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<QuerryResult>(`${this.basePath}/queryProblems`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 撤销授权
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revokeUserTokenPost(body?: RevokeInfo, observe?: 'body', reportProgress?: boolean): Observable<BasicResponse>;
    public revokeUserTokenPost(body?: RevokeInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BasicResponse>>;
    public revokeUserTokenPost(body?: RevokeInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BasicResponse>>;
    public revokeUserTokenPost(body?: RevokeInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BasicResponse>(`${this.basePath}/revokeUserToken`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
